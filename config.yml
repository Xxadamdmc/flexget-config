# Flexget (http://www.flexget.com) configuration file.
#
# Created by: Jeff Wilson <jeff@jeffalwilson.com>
# Available from: https://github.com/atlanta800/dotfiles
#
# Some settings in this config require changes in my fork of Flexget which
# is available here: https://github.com/atlanta800/Flexget
#
# For various reasons I've moved some settings into a private subfolder. The
# files are:
#   * private/global.yml
#   * private/movies-global.yml
#   * private/tv-global.yml
# These files are not necessary to use this cofiguration, simply remove the
# 'include' plugin references and you should be fine. You'll also want to check
# for a few places that I've commented out sections that I've moved to these
# config files. I've also added redacted versions of the private files to
# reference if you'd like to do the same.
#
# == Rar-unpacking ==
# My entire setup results in a single video file (.mkv, .mp4, etc) in the final
# destination with a nice name regardless if it's packed in a rar or not.
# Here's the gist of how it works:
#   1. Flexget accepts the torrent regardless if it's a rar-pack or not
#   2. My custom content_sort plugin changes the move_done value if the torrent
#       contains a .rar
#   3. The torrent is added to Deluge
#   4. Deluge is configured with the Execute (http://dev.deluge-torrent.org/wiki/Plugins/Execute)
#       plugin to run my deluge_torrent_complete script (also available in this
#       repository) when any torrent is done downloading
#   5. deluge_torrent_complete checks if the torrent is located in the
#       directory we set in step #2, if not it skips to the last step
#   6. deluge_torrent_complete unpacks the first .rar file it finds in the
#       torrent to a 'staging' location
#   7. deluge_torrent_complete calls flexget with a completely separate config,
#       'sorting.yml' (also available in this repository)
#   8. The 'sorting.yml' config checks for files in the 'staging' location from
#       step #6 and renames and moves the files to their appropriate final
#       location
#   9. deluge_torrent_complete tells my XBMC server to update the library (scan
#       for new files)
#

templates:

  global:
    include: [ private/global.yml ]
    # Make there's 50GB free before adding more downloads
    free_space:
      path: /raid
      space: 50000
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    # Most of these are the results of problem torrents I kept seeing still pop up, so I wholesale blocked them
    # RegExr (http://www.gskinner.com/RegExr/) is a great tool for testing regexes
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}                    # Block any subbed/dubbed/etc videos
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title} # Block series, only accept one at a time
        - \b3-?D\b: {from: title}                             # I don't have any 3D displays
        - \btrailer\b: {from: title}                          # I've gotten a few trailers that matched as movies. VERY annoying
        - \bR5\b: {from: title}                               # The following are poor quality types that somehow got through the quality
        - \bWEBSCR\b: {from: title}                           # features usually due to the title including a keyword like "720p" as well
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title}
        - '{C_P}': {from: title}                              # The following are groups with poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
        - \bASAP\b: {from: title}
        - the.day.of.the.doctor                               # The following are titles that caused me issues from plugins
    # Require at least 40 seeds of any torrent
    torrent_alive:
      min_seeds: 10
      reject_for: 3 hours
    # Filter by filenames. Allow multiple video types and rar packs (but note if there is just a
    # single .rar file it won't be accepted)
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
        - '*.r0*'
        - '*.part0*'
      reject:
        - 'password.txt'
        - '*.wmv'
    # Limit the frequency of requests to domains so they don't complain about
    # using a bot
    domain_delay:
      bt-chat.com: 5 seconds
      torrentz.eu: 5 seconds
    # The Pirate Bay ssl certs always fail
    verify_ssl_certificates: no
    # Size and seed restrictions require real torrents
    magnets: no
    # A couple of people didn't change this when they tried out my configs, so I
    # moved it to private/global.yml, uncomment here to get email notificians
    #email:
    #  from: user@your.domain
    #  to: your@email.address
    # Deluge is configured in my private configs, but I'm leaving this for
    # clarity and completeness uncomment it so that your torrents are added to
    # deluge (or replace it with your target).
    #deluge:
    # # Ignore all but the file that is >90% of the torrent if it exists
    # # You will most likely want to combine this with the 'DeletePartials' 
    # # Deluge plugin
    #  main_file_only: yes


  # This template is a "global" template for all TV-related tasks.
  # We keep all of the RSS feeds that list tv-related torrents here
  # as well as where to check existing shows.
  tv-global:
    include: [ private/tv-global.yml ]
    # This is a TON of feeds, you probably don't need so many, but why not?
    inputs:
      - rss: { url: 'http://www.torlock.com/television/rss.xml', silent: yes }  # TorLock (TV)
      - rss: { url: 'http://torrentz.eu/feed_verified?q=tv', silent: yes }      # Torrentz (Verified only, TV)
      - rss: { url: 'http://ezrss.it/feed/', silent: yes }                      # EZRSS
      - rss: { url: 'http://showrss.karmorra.info/feeds/all.rss', silent: yes } # Karmorra (All)
      - rss: { url: 'http://rss.bt-chat.com/?group=3', silent: yes }            # BT-Chat (EZTV)
      - rss: { url: 'https://rss.thepiratebay.se/208', silent: yes }            # The Pirate Bay (Highres - TV shows)
    # Impose reasonable size constraints
    content_size:
      max: 5000
      min: 20
    # Prevent from downloading shows that were aquired manually
    # or are currently downloading
    exists_series:
      - "/raid/videos/TV Shows/"
      - "/raid/videos/TV Premieres/"
      - "/raid/videos/staging/tv_shows/"
      - "/raid/videos/staging/tv_premieres/"
      - "/home/deluge/downloads/"
    # Look up info on TheTVDB.com to fill in extra info
    thetvdb_lookup: yes
    # Add accepted entries to Deluge and make sure they end up in the correct
    # folder with a nice name
    set:
      # Rename the "content file" to something nice
      content_filename: >
        {{ series_name|replace('/', '_')|replace(':', ' -') }} - {{ tvdb_ep_id|default(series_id) }}{% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name|replace('/', '_')|replace(':', ' -') }}{% endif %} - {{ quality }}
      label: tv


  # These are the shows I regularly watch
  tv-my_shows:
    configure_series:
      from:
        trakt_list: &trakt_settings
          username: xxxx
          password: xxxx
          api_key: xxxx
          custom: none
    # Add accepted entries to Deluge, queue them to the top and make sure they
    # end up in the correct folder
    set:
      movedone: >
        /raid/videos/TV Shows/{{ series_name|replace('/', '_')|replace(':', ' -') }}/{% if series_id_type == 'ep' %}Season {{ tvdb_season|default(series_season) }}/{% endif %}
      queuetotop: yes
    # This is a custom plugin, it is part of my rar-unpacking method,
    # it changes 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/home/deluge/downloads/completed/tv_shows/'


  # I'm always up for new shows, but some I genres I just can't stand. This
  # template grabs all of the premieres except for some genres
  tv-premieres:
    # The entry has to have the tvdb_genres field so I can filter by it
    require_field:
      - tvdb_genres
      - tvdb_first_air_date
    # Make sure plenty of people are seeding it, otherwise it may not be that good
    torrent_alive:
      min_seeds: 50
    # Block these genres if they exist in the list of tvdb_genres at all
    regexp:
      reject:
        - documentary: {from: tvdb_genres}
        - talk show: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - home and garden: {from: tvdb_genres}
    if:
      # Block these genres only if they are the ONLY genre listed in
      # tvdb_genres. For example, this will not block a show that's both
      # "Comedy" and "Drama" but it will block a show that is just "Drama"
      - "tvdb_genres == ['Drama']": reject
      # Block premieres that weren't within the last 60 days
      - tvdb_first_air_date != None and tvdb_first_air_date < now - timedelta(days=60): reject
    # Accept all series permieres
    series_premiere:
      timeframe: 1 days
      quality: 720p+ hdtv+
    # Add to deluge, but don't queue to top (My_TV_Shows are more important)
    # and put in a different location
    set:
      movedone: "/raid/videos/TV Premieres/{{ series_name|replace('/', '_')|replace(':', ' -') }}/Season {{ tvdb_season|default(series_season) }}"
      queuetotop: no
      label: tv-premiere
    # This is a custom plugin, it is part of my rar-unpacking method, it changes
    # 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/home/deluge/downloads/completed/tv_premieres/'


  # If a premier was grabbed, keep on tracking it until the directory is (re)moved
  tv-premieres-track:
    configure_series:
      settings:
        target: 720p+ hdtv+
        timeframe: 3 days
        quality: webrip+
      from:
        listdir:
          - "/raid/videos/TV Premieres/"
    set:
      movedone: >
        /raid/videos/TV Premieres/{{ series_name|replace('/', '_')|replace(':', ' -') }}/{% if series_id_type == 'ep' %}Season {{ tvdb_season|default(series_season) }}/{% endif %}
      queuetotop: no
      label: tv-premiere-track
    # This is a custom plugin, it is part of my rar-unpacking method, it changes
    # 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/home/deluge/downloads/completed/tv_premieres/'


  # This template is a "global" template for all movie-related tasks.
  # We keep all of the RSS feeds that list movie-related torrents here
  # as well as some other configurations.
  movies-global:
    include: [ private/movies-global.yml ]
    inputs:
      - rss: { url: 'http://www.torlock.com/movies/rss.xml', silent: yes }     # TorLock (Movies)
      - rss: { url: 'http://torrentz.eu/feed_verified?q=movies', silent: yes } # Torrentz (Verified Movies)
      - rss: { url: 'https://rss.thepiratebay.se/207', silent: yes }           # The Pirate Bay (Highres - Movies)
    # Some feeds might include TV Shows, ignore them
    regexp:
      reject:
        - s\d+e\d+: {from: title}
        - '\d{4}.\d{2}.\d{2}': {from: title}
        - \d+x\d+: {from: title}
        - \baac2: {from: title} # No 2 channel audio
    # Force proper_movies to run after regexp to avoid unnecessary imdb_lookup
    plugin_priority:
      regexp: 176
      if: 177
      proper_movies: 171
    # Impose reasonable size constraints
    content_size:
      max: 20000
      min: 1000
    imdb_lookup: yes
    # A Rotten Tomatoes API key is set in my private config, but I'm leaving
    # this here for clarity and completeness.
    #rottentomatoes_lookup: yes
    seen_movies: strict # Don't download movies we've already seen
    # Check for already downloaded or currently downloading movies
    exists_movie:
      - /raid/videos/Movies/
      - /raid/videos/SDMovies/
      - /raid/videos/staging/movies
      - /home/deluge/downloads/
    # Download propers, since they will have the same content_filename,
    # lower/non-propers will be overwritten
    proper_movies: yes
    set:
      # Give folders/files nice names
      movedone: "/raid/videos/Movies/{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }})"
      content_filename: |
        {{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}
    # This is a custom plugin, it is part of my rar-unpacking method, it changes
    # 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/home/deluge/downloads/completed/movies/'


  # Keep all the discover settings in one place
  movies-discover:
    include: [ private/movies-discover.yml ]
    discover:
      from:
        - flexget_archive: yes
        - torrentz:
            reputation: verified
            extra_terms: "movie* hd"
        - piratebay:
            category: "highres movies"
            sort_by: seeds
      interval: 2 hours
      what: [ filler: yes ]


  # This template runs feeds through my very specific custom filter
  movies-auto:
    my_movie_filter: yes
    template: movies-discover
    discover:
      from: [ filler: yes ]
      what:
        - rottentomatoes_list:
            dvds:
              - top_rentals
              - new_releases
    set:
      queuetotop: no
      label: movies-auto


  # This template uses the movie queue to find movies from various sources
  movies-queued:
    movie_queue: yes
    template: movies-discover
    disable_plugin:
      - seen_movies
    discover:
      what:
        - emit_movie_queue: yes
      from: [ filler: yes ]
    set:
      label: my-movies


# This is where we pull everything together
tasks:

  # Use a local folder (synced with Dropbox) as a source
  # I can drop torrents in this folder and they are synced with Dropbox, always
  # accepted, then the original file is deleted
  Local_Torrents-TV:
    priority: 1
    include:
      - series-favorite.yml
      - series-following.yml
      - series-daily.yml
    template:
      - tv-global
      - tv-my_shows
    disable_builtins: [seen, seen_info_hash]
    disable_plugin:
      - configure_series
      - trakt_list
      - inputs
      - exists_series
      - regexp
      - content_size
      - torrent_alive
    filler: yes # To avoid warnings about non-functional input
    all_series:
      parse_only: yes
    plugin_priority:
      exec: 0
    listdir: /home/atlanta800/Dropbox/torrents/TV
    exec:
      on_output:
        for_accepted: rm "/home/atlanta800/Dropbox/torrents/TV/{{title}}.torrent"
    accept_all: yes
    set:
      label: local-tv


  # Same as above but for movies
  Local_Torrents-Movies:
    priority: 2
    template:
      - movies-global
    disable_builtins: [seen, seen_info_hash]
    disable_plugin:
      - configure_series
      - inputs
      - exists_movie
      - seen_movies
      - regexp
      - content_size
      - torrent_alive
    filler: yes # To avoid warnings about non-functional input
    # Mark movies as seen
    movie_queue: yes
    plugin_priority:
      exec: 0
    listdir: /home/atlanta800/Dropbox/torrents/Movies
    exec:
      on_output:
        for_accepted: rm "/home/atlanta800/Dropbox/torrents/Movies/{{title}}.torrent"
    accept_all: yes
    set:
      label: local-movies


  # All of the TV-related tasks pull in the tv-global template, this gives
  # all of the necessary rss sources and a few extra configs

  # There are 3 My_TV Shows tasks, the first, tries to get the most wanted qualities
  My_TV_Shows-Favorite:
    priority: 10
    include: [ series-favorite.yml ]
    template:
      - tv-global
      - tv-my_shows
    configure_series:
      from:
        trakt_list:
          <<: *trakt_settings
          custom: Favorite TV
      settings:
        target: 720p+ hdtv+
        timeframe: 5 days
        quality: 720p+ dvdscr+

  My_TV_Shows-Following:
    priority: 11
    include: [ series-following.yml ]
    template:
      - tv-global
      - tv-my_shows
    configure_series:
      from:
        trakt_list:
          <<: *trakt_settings
          custom: Following TV
      settings:
        target: 720p+ dvdscr+
        timeframe: 3 days
        quality: 480p+ webrip+

  My_TV_Shows-Daily:
    priority: 12
    include: [ series-daily.yml ]
    template:
      - tv-global
      - tv-my_shows
    configure_series:
      from:
        trakt_list:
          <<: *trakt_settings
          custom: Daily TV
      settings:
        target: webrip+
        timeframe: 12 hours
        quality: preair+


  # Task for the tv-premieres plugin
  Series_Premieres:
    priority: 40
    template:
      - tv-global
      - tv-premieres


  # Task for the tv-premieres-track plugin
  Series_Premieres_Track:
    priority: 50
    template:
      - tv-global
      - tv-premieres-track


  # This task queues all of the movies in my IMDB watchlist
  Movie_Queue:
    include: [ private/movie-queue.yml ] # Contains IMDB/trakt.tv username/password
    priority: 100 # Always run before My_Movies task
    template: no_global # None of the global templates make sense here
    imdb_list:
      list: watchlist
      #auto_remove: [ accepted, rejected ] # keep my watchlist clean
    trakt_list:
      <<: *trakt_settings
      custom: Movie Queue
    accept_all: yes
    queue_movies: yes


  # Cleans movies from the movie queue that we already have
  Clean_Movie_Queue:
    template: no_global # None of the global templates make sense here
    disable_builtins: [seen, seen_info_hash]
    disable_plugin:
      - seen_movies
    accept_all: yes
    listdir:
      - /raid/videos/Movies/
      - /raid/videos/SDMovies/
    imdb_lookup: yes
    tmdb_lookup: yes
    rottentomatoes_lookup: yes
    require_field: [movie_name, movie_year]
    movie_queue: yes
    trakt_remove:
      username: xxxx
      password: xxxx
      api_key: xxxx
      type: movies
      list: Movie Queue

  # The next two tasks download the queue from the previous task effectively implementing
  # a 2 day timeframe for 1080p movies, then falls back to 720p
  My_Movies-1080p:
    priority: 110
    template:
      - movies-global
      - movies-queued
    quality: 1080p+ bluray+ h264+ !mp3 !aac


  My_Movies-720p:
    priority: 120
    template:
      - movies-global
      - movies-queued
    quality: 720p+ webdl+ xvid+ !mp3 !aac
    torrent_alive:
      min_seeds: 5
    delay: 7 days # Wait 7 days for a 1080p movie before trying downloading 720p


  # These task implement the movies-auto template
  Auto_Movies-1080p:
    priority: 130
    quality: 1080p+ bluray+ h264+ !mp3 !aac
    template:
      - movies-global
      - movies-auto
    set:
      label: movies-auto

  Auto_Movies-720p:
    priority: 140
    quality: 720p+ dvdrip+ xvid+ !mp3 !aac
    template:
      - movies-global
      - movies-auto
    set:
      label: movies-auto
    delay: 7 days # Wait 7 days for a 1080p movie before trying downloading 720p


schedules:

  # Local
  - tasks: [ 'Local_Torrents-*' ]
    interval:
      minutes: 10

  #
  # Series
  #
  - tasks: [ 'My_TV_Shows-*', 'Series_Premieres_Track' ]
    interval:
      minutes: 30

  - tasks: [ 'Series_Premieres' ]
    interval:
      hours: 2

  #
  # Movies
  #
  - tasks: [ 'Movie_Queue', 'My_Movies-*' ]
    interval:
      hours: 1

  - tasks: [ 'Auto_Movies-*' ]
    interval:
      hours: 2

  - tasks: [ 'Clean_Movie_Queue' ]
    interval:
      weeks: 1
      on_day: tuesday
