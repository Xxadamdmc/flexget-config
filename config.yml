# Flexget (http://www.flexget.com) configuration file.
#
# Created by: Jeff Wilson <jeff@jeffalwilson.com>
# Available from: https://github.com/jawilson/dotfiles
#
# For more information, see the README.md
#

# Use the secrets plugin to separately store credentials, etc
secrets: secretfile.yml
templates:

  global:
    if:
      - "'torrentleech' in url":
          deluge:
            username: '{{ secrets.deluge.username }}'
            password: '{{ secrets.deluge.password }}'
            main_file_only: yes # Ignore all but the file that is >90% of the torrent if it exists
            keep_subs: yes
            port: 58847
      - "'torrentleech' not in url":
          deluge:
            username: '{{ secrets.deluge.username }}'
            password: '{{ secrets.deluge.password }}'
            main_file_only: yes # Ignore all but the file that is >90% of the torrent if it exists
            keep_subs: yes
            port: 58846
    # Make there's 50GB free before adding more downloads
    free_space:
      path: /media/raid
      space: 50000
    # Make sure all filenames are Windows safe (for samba)
    pathscrub: windows
    # Most of these are the results of problem torrents I kept seeing still pop up, so I wholesale blocked them
    # RegExr (http://www.gskinner.com/RegExr/) is a great tool for testing regexes
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}                    # Block any subbed/dubbed/etc videos
        - \bspanish\b: {from: title}                          # Spanish releases kept cropping up
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title} # Block series, only accept one at a time
        - \b3-?D\b: {from: title}                             # I don't have any 3D displays
        - \btrailer\b: {from: title}                          # I've gotten a few trailers that matched as movies. VERY annoying
        - \bR5\b: {from: title}                               # The following are poor quality types that somehow got through the quality
        - \bWEBSCR\b: {from: title}                           # features usually due to the title including a keyword like "720p" as well
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title}
        - '{C_P}': {from: title}                              # The following are groups with poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
        - \bASAP\b: {from: title}
        - the.day.of.the.doctor                               # The following are titles that caused me issues from plugins
    # Require at least 10 seeds of any torrent
    torrent_alive:
      min_seeds: 10
      reject_for: 1 day
    # Filter by filenames. Allow multiple video types and rar packs (but note if there is just a
    # single .rar file it won't be accepted)
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mp4'
        - '*.r0*'
        - '*.part0*'
      reject:
        - 'password.txt'
        - '*.wmv'
    # Limit the frequency of requests to domains so they don't complain about
    # using a bot
    domain_delay:
      www.torrentleech.org: 10 seconds
      rss.torrentleech.org: 10 minutes
      bt-chat.com: 5 seconds
      thexem.de: 10 seconds
    # The Pirate Bay ssl certs always fail
    verify_ssl_certificates: no
    # Size and seed restrictions require real torrents
    magnets: no
    slack:
      webhook-url: '{{ secrets.slack.webhook_url }}'
      text: >
        {{task}} - Download started:
        {%- if series_name is defined %}
        {% set info_string = tvdb_series_name|d(series_name) ~ ' - ' ~ series_id ~ (' - ' ~ tvdb_ep_name if tvdb_ep_name|default(False) else '') %}
        {%- if trakt_series_slug is defined and trakt_season is defined and trakt_episode is defined -%}
        <https://trakt.tv/shows/{{ trakt_series_slug }}/seasons/{{ trakt_season }}/episodes/{{ trakt_episode }}|{{ info_string }}>
        {%- else %}
        {{ info_string }}
        {%- endif %}
        - {{quality}}
        {%- elif imdb_name is defined %}
        {%- if imdb_url is defined %}
        <{{imdb_url}}|{{imdb_name}} {{imdb_year}}>
        {%- else %}
        {{imdb_name}} {{imdb_year}}
        {%- endif %}
        - {{quality}}
        {%- else -%}
        {{title}}
        {%- endif %}

  # This template is a "global" template for all TV-related tasks.
  # We keep all of the RSS feeds that list tv-related torrents here
  # as well as where to check existing shows.
  tv-global:
    # This is a TON of feeds, you probably don't need so many, but why not?
    inputs:
      - rss: { url: 'http://rss.torrentleech.org/{{ secrets.torrentleech.rss_key }}', other_fields: [category] }
    if:
      - "has_field('category')":
          regexp:
            reject_excluding:
              - '^Episodes( HD)?$': {from: category}
    archive: [tv]
    # Impose reasonable size constraints
    content_size:
      max: 5000
      min: 20
    # Prevent from downloading shows that were aquired manually
    # or are currently downloading
    exists_series:
      - "/media/raid/videos/TV Shows/"
      - "/media/raid/videos/staging/tv_shows/"
      - "/media/raid/deluge/downloads/"
    # Look up info on TheTVDB.com to fill in extra info
    thetvdb_lookup: yes
    trakt_lookup: yes
    require_field: [series_name, series_id]
    # Add accepted entries to Deluge and make sure they end up in the correct
    # folder with a nice name
    set:
      queuetotop: yes
      movedone: >
        /media/raid/videos/TV Shows/{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }}/{% if series_id_type == 'ep' %}Season {{ series_season }}/{% endif %}
      # Rename the "content file" to something nice, use leading slash to force file to top level
      content_filename: >
        /{{ tvdb_series_name|default(series_name)|replace('/', '_')|replace(':', ' -')|replace(',', '') }} - {{ series_id }}{% if tvdb_ep_name|default(False) %} - {{ tvdb_ep_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }}{% endif %} - {{ quality }}
      label: tv
    # This is a custom plugin, it is part of my rar-unpacking method,
    # it changes 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/media/raid/deluge/downloads/completed/tv_shows/'


  # This template is a "global" template for all movie-related tasks.
  # We keep all of the RSS feeds that list movie-related torrents here
  # as well as some other configurations.
  movies-global:
    inputs:
      - rss: { url: 'http://rss.torrentleech.org/{{ secrets.torrentleech.rss_key }}', other_fields: [category] }
    # Some feeds might include TV Shows, ignore them
    if:
      - "has_field('category')":
          regexp:
            reject_excluding:
              - '^(HD|BDRip|DVDRip.DVDScreener|DVD-R|Documentaries)$': {from: category}
    # Rotten Tomatoes is broken, possibly forever :(
    #rottentomatoes_lookup: yes
    archive: [movies]
    regexp:
      reject:
        - s\d+e\d+: {from: title}
        - '\d{4}.\d{2}.\d{2}': {from: title}
        - \d+x\d+: {from: title}
        - \baac2: {from: title} # No 2 channel audio
    # Force proper_movies to run after regexp to avoid unnecessary imdb_lookup
    plugin_priority:
      regexp: 176
      if: 177
      proper_movies: 171
    # Impose reasonable size constraints
    content_size:
      max: 20000
      min: 1000
    imdb_lookup: yes
    trakt_lookup: yes
    # Check for already downloaded or currently downloading movies
    exists_movie:
      - /media/raid/videos/Movies/
      - /media/raid/videos/staging/movies
      - /media/raid/deluge/downloads/
    # Download propers, since they will have the same content_filename,
    # lower/non-propers will be overwritten
    proper_movies: yes
    set:
      # Give folders/files nice names
      movedone: "/media/raid/videos/Movies/{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }})"
      # Rename the "content file" to something nice, use leading slash to force file to top level
      content_filename: |
        /{{ imdb_name|replace('/', '_')|replace(':', ' -')|replace(',', '') }} ({{ imdb_year }}) - {{ quality }}
    # This is a custom plugin, it is part of my rar-unpacking method, it changes
    # 'movedone' based on the regexp in the key
    content_sort:
      '*.rar': '/media/raid/deluge/downloads/completed/movies/'


  # This template uses the movie queue to find movies from various sources
  movies-queued:
    list_match:
      from:
        - movie_list: movie queue
    disable:
      - seen_movies
    discover:
      release_estimations:
        optimistic: 30 days
      what:
        - movie_list: movie queue
      from:
        - torrentleech:
            rss_key: '{{ secrets.torrentleech.rss_key }}'
            username: '{{ secrets.torrentleech.username }}'
            password: '{{ secrets.torrentleech.password }}'
            category: ['HD', 'BDRip', 'DVDRip', 'DVDR', 'Documentaries']
        - flexget_archive: [movies]
        - rarbg:
            category: [44, 45]
            min_seeders: 10
    list_remove:
      - trakt_list:
          account: '{{ secrets.trakt.account }}'
          list: Movie Queue
    list_add:
      - trakt_list: # Add accepted item to my Trakt watchlist
          account: '{{ secrets.trakt.account }}'
          list: watchlist
    set:
      label: my-movies


# This is where we pull everything together
tasks:

  # Use a local folder (synced with Dropbox) as a source
  # I can drop torrents in this folder and they are synced with Dropbox, always
  # accepted, then the original file is deleted
  Local-Torrents-TV:
    priority: 1
    include:
      - series.yml
      - series-ak.yml
    template:
      - tv-global
    disable:
      - seen
      - seen_info_hash
      - retry_failed
      - configure_series
      - trakt_list
      - inputs
      - exists_series
      - regexp
      - content_size
      - content_filter
      - torrent_alive
    all_series:
      parse_only: yes
    sequence:
      - configure_series:
          settings:
            assume_special: true
          from:
            trakt_list:
              account: '{{ secrets.trakt.account }}'
              list: TV Shows
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            assume_special: true
          from:
            trakt_list:
              account: '{{ secrets.trakt.account }}'
              list: AK Shows
              type: shows
              strip_dates: yes
    plugin_priority:
      exec: 0
    filesystem:
      path: '/home/jawilson/Dropbox/torrents/TV'
      recursive: yes
      retrieve: files
      regexp: '.*\.torrent$'
    no_entries_ok: yes
    verify_ssl_certificates: no
    exec:
      on_output:
        for_accepted: rm "{{location}}"
    accept_all: yes
    set:
      label: local-tv


  # Same as above but for movies
  Local-Torrents-Movies:
    priority: 2
    template:
      - movies-global
      - movies-queued
    disable:
      - seen
      - seen_info_hash
      - retry_failed
      - discover
      - inputs
      - exists_movie
      - seen_movies
      - regexp
      - content_size
      - content_filter
      - torrent_alive
    plugin_priority:
      exec: 0
    filesystem:
      path: '/home/jawilson/Dropbox/torrents/Movies'
      recursive: yes
      retrieve: files
      regexp: '.*\.torrent$'
    no_entries_ok: yes
    exec:
      on_output:
        for_accepted: rm "{{location}}"
    accept_all: yes
    verify_ssl_certificates: no
    set:
      label: local-movies


  Sync-TV-Shows:
    manual: yes
    template: no_global # None of the global templates make sense here
    filesystem:
      path:
        - /media/raid/videos/TV Shows/
        - /media/raid/videos/AK Shows/
      recursive: yes
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4|mpg|m4v)$'
    regexp:
      reject:
        - \bsample\b: {from: title}
    disable: builtins
    thetvdb_lookup: yes
    include:
      - series.yml
      - series-ak.yml
    sequence:
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              account: '{{ secrets.trakt.account }}'
              list: TV Shows
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            tracking: no
          from:
            trakt_list:
              account: '{{ secrets.trakt.account }}'
              list: AK Shows
              type: shows
              strip_dates: yes
    accept_all: yes
    exec: echo "Found {{ series_name }} - {{ series_id }} ({{ location }})" >> /dev/null

  Sync-Trakt-Shows:
    manual: yes
    template: no_global
    disable: [seen]
    inputs:
      - next_trakt_episodes:
          account: '{{ secrets.trakt.account }}'
          context: collected
          position: last
          list: TV Shows
          strip_dates: yes
      - next_trakt_episodes:
          account: '{{ secrets.trakt.account }}'
          context: collected
          position: next
          list: AK Shows
          strip_dates: yes
    accept_all: yes
    set_series_begin: yes

  # All of the TV-related tasks pull in the tv-global template, this gives
  # all of the necessary rss sources and a few extra configs

  # There are 3 My-TV Shows tasks, the first, tries to get the most wanted qualities
  My-TV-Shows:
    priority: 10
    include:
      - series.yml
      - series-ak.yml
    template: [tv-global]
    discover:
      what:
        - next_trakt_episodes:
            account: '{{ secrets.trakt.account }}'
            context: collected
            position: next
            list: TV Shows
            strip_dates: yes
        - next_trakt_episodes:
            account: '{{ secrets.trakt.account }}'
            context: collected
            position: next
            list: AK Shows
            strip_dates: yes
        - next_series_episodes:
            backfill: yes
            from_start: yes
      from:
        - torrentleech:
            rss_key: '{{ secrets.torrentleech.rss_key }}'
            username: '{{ secrets.torrentleech.username }}'
            password: '{{ secrets.torrentleech.password }}'
            category: ['Episodes HD', 'Episodes']
        - flexget_archive: [tv]
        - rarbg:
            category: [41]
            use_tvdb: true
            min_seeders: 10
    sequence:
      - configure_series:
          settings:
            target: 720p+ hdtv+
            timeframe: 14 days
            quality: 480p+ webrip+
            tracking: backfill
          from:
            trakt_list:
              account: '{{ secrets.trakt.account }}'
              list: TV Shows
              type: shows
              strip_dates: yes
      - configure_series:
          settings:
            target: 720p+ hdtv+
            timeframe: 14 days
            quality: 480p+ webrip+
            tracking: backfill
          from:
            trakt_list:
              account: '{{ secrets.trakt.account }}'
              list: AK Shows
              type: shows
              strip_dates: yes


  # Cleans movies from the movie queue (and Trakt) that we already have
  Clean-Movie-Queue:
    priority: 90
    template: no_global # None of the global templates make sense here
    disable:
      - seen
      - seen_info_hash
      - seen_movies
    accept_all: yes
    filesystem:
      path: /media/raid/videos/Movies/
      recursive: no
      retrieve: dirs
    imdb_lookup: yes
    tmdb_lookup: yes
    # Rotten Tomatoes is broken, possibly forever :(
    #rottentomatoes_lookup: yes
    require_field: [movie_name, movie_year]
    list_match:
      from:
        - movie_list: movie queue
    list_remove:
      - trakt_list:
          account: '{{ secrets.trakt.account }}'
          list: Movie Queue


  # This task queues all of the movies in my Trakt "Movie Queue" playlist
  Movie-Queue:
    priority: 100 # Always run before My-Movies task
    template: no_global # None of the global templates make sense here
    trakt_list:
      account: '{{ secrets.trakt.account }}'
      list: Movie Queue
      type: movies
    no_entries_ok: yes
    accept_all: yes
    list_add:
      - movie_list: movie queue


  # The next two tasks download the queue from the previous task effectively implementing
  # a 2 day timeframe for 1080p movies, then falls back to 720p
  My-Movies-1080p:
    priority: 110
    template:
      - movies-global
      - movies-queued
    quality: 1080p+ bluray+ h264+ truehd|dtshd|dd5.1|dts


  My-Movies-720p:
    priority: 120
    template:
      - movies-global
      - movies-queued
    quality: 720p+ dvdrip+ xvid+ truehd|dtshd|dd5.1|dts|ac3
    torrent_alive:
      min_seeds: 5
    delay: 28 days # Wait 28 days for a 1080p movie before trying downloading 720p


schedules:

  #
  # Local
  #
  - tasks: [ 'Local-Torrents-*' ]
    interval:
      minutes: 15

  #
  # Series
  #
  - tasks: [ 'My-TV-Shows' ]
    schedule:
      minute: 3,18,33,48

  #
  # Movies
  #
  - tasks: [ 'Movie-Queue', 'My-Movies-*' ]
    interval:
      hours: 1

  - tasks: [ 'Clean-Movie-Queue' ]
    interval:
      weeks: 1
